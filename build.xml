<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<project basedir="." default="build" name="Subconnector" xmlns:ivy="antlib:org.apache.ivy.ant">
	
	<!-- PROPERTIES -->
	<property environment="env"/> 
	<property name="version" value="2.0.1"/>
	
    <property name="junit.output.dir" value="junit"/>
    <property name="jabadoc.private.output.dir" value="docs/private_javadoc"/>
    <property name="jabadoc.public.output.dir" value="docs/public_javadoc"/>
	<property name="main.source.dir" value="src/main/java"/>
	<property name="test.source.dir" value="src/test/java"/>
	<property name="lib.dir" value="lib"/>

    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.6"/>
    <property name="source" value="1.6"/>

    <property name="ivy.install.version" value="2.3.0" />
    <condition property="ivy.home" value="${env.IVY_HOME}">
        <isset property="env.IVY_HOME" />
    </condition>
    <property name="ivy.home" value="${user.home}/.ant" />
    <property name="ivy.jar.dir" value="${ivy.home}/lib" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
	
	<!-- CLASSPATH -->
	<path id="Subconnector.classpath">
        <pathelement location="bin"/>
        <fileset dir="lib">
            <include name="*.jar" />
        </fileset>
    </path>

	<!-- Main build target -->
	<target name="build" depends="clean, init, init-ivy, retrieve-dependencies, compile, javadocs, jars, packetize, test" />
	<!-- Test target -->
	<target name="test" depends="init-tests, compile-tests, net.subclient.subsonic.responses-test, net.subclient.subsonic.util-test, junitreport" />

    <target name="download-ivy" unless="offline">

        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>
    <target name="init-ivy" depends="download-ivy">
        <!-- try to load ivy here from ivy home, in case the user has not already dropped
                it into ant's lib dir (note that the latter copy will always take precedence).
                We will not fail as long as local lib dir exists (it may be empty) and
                ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>

        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant"
                 classpathref="ivy.lib.path"/>
    </target>

	<!-- Delete the old bin directory -->
	<target name="clean">
        <delete dir="bin"/>
        <delete dir="${lib.dir}"/>
		<delete>
		    <fileset dir="deploy">
		    	<exclude name="license.txt"/>
		    	<exclude name="README"/>
		    </fileset>
		</delete>
    </target>
	<!-- Copy all non-source files to the bin directory -->
	<target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="${main.source.dir}">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target name="retrieve-dependencies"
            description="Retrieve dependencies with Apache IVY">
        <mkdir dir="${lib.dir}"/>
        <ivy:retrieve type="jar" />
    </target>
	<!-- Compile sources -->
	<target name="compile"
            depends="retrieve-dependencies">
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" includeantruntime="false" source="${source}" target="${target}" encoding="UTF-8">
            <src path="${main.source.dir}"/>
            <classpath refid="Subconnector.classpath"/>
        </javac>
    </target>
	
	<!-- Create application javadocs -->
	<target name="javadocs">
		<mkdir dir="${jabadoc.private.output.dir}"/>
		<javadoc sourcepath="${main.source.dir}" destdir="${jabadoc.private.output.dir}" access="private" charset="UTF-8" encoding="UTF-8">
			<classpath refid="Subconnector.classpath"/>
		</javadoc>
        <mkdir dir="${jabadoc.public.output.dir}"/>
        <javadoc sourcepath="${main.source.dir}" destdir="${jabadoc.public.output.dir}" access="public" charset="UTF-8" encoding="UTF-8">
        	  <classpath refid="Subconnector.classpath"/>
		</javadoc>
	</target>
	
	<!-- Create jars  -->
	<target name="jars">
		<mkdir dir="deploy"/>
		<jar destfile="deploy/subclient-subconnector-${version}.jar" basedir="bin" compress="true" />
		<jar destfile="deploy/subclient-subconnector-${version}-sources.jar" basedir="src" compress="true" />
		<jar destfile="deploy/subclient-subconnector-${version}-javadoc.jar" basedir="${jabadoc.public.output.dir}" compress="true" />
	</target>
	
	<!-- Create deployment zip -->
	<target name="packetize">
		<mkdir dir="deploy/temp/subclient-subconnector-${version}"/>
		<copy todir="deploy/temp/subclient-subconnector-${version}">
			<fileset dir="deploy" includes="subclient-subconnector-${version}.jar,subclient-subconnector-${version}-sources.jar,subclient-subconnector-${version}-javadoc.jar,license.txt,README" />
		</copy>
		<zip destfile="deploy/subclient-subconnector-${version}.zip" basedir="deploy/temp"/>
		<delete dir="deploy/temp" />
	</target>
	
	<!-- Copy non-source files from unit tests to bin directory -->
	<target name="init-tests">
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="${test.source.dir}">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
	<!-- Compile unit tests -->
	<target name="compile-tests">
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" includeantruntime="false" source="${source}" target="${target}" encoding="UTF-8">
            <src path="${test.source.dir}"/>
            <classpath refid="Subconnector.classpath"/>
        </javac>
    </target>
	
	<!-- Run unit tests -->
	<target name="net.subclient.subsonic-test">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="net.subclient.subsonic.SubsonicConnectionTest" todir="${junit.output.dir}"/>
            <classpath refid="Subconnector.classpath"/>
        </junit>
    </target>
	<target name="net.subclient.subsonic.responses-test">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="net.subclient.subsonic.responses.GetAlbumsResponseTest" todir="${junit.output.dir}"/>
            <test name="net.subclient.subsonic.responses.GetBookmarksResponseTest" todir="${junit.output.dir}"/>
            <test name="net.subclient.subsonic.responses.GetIndexesResponseTest" todir="${junit.output.dir}"/>
            <test name="net.subclient.subsonic.responses.GetLicenseResponseTest" todir="${junit.output.dir}"/>
            <test name="net.subclient.subsonic.responses.GetMusicDirectoryResponseTest" todir="${junit.output.dir}"/>
            <test name="net.subclient.subsonic.responses.GetMusicFoldersResponseTest" todir="${junit.output.dir}"/>
            <test name="net.subclient.subsonic.responses.GetPlaylistResponseTest" todir="${junit.output.dir}"/>
            <test name="net.subclient.subsonic.responses.GetPlaylistsResponseTest" todir="${junit.output.dir}"/>
            <test name="net.subclient.subsonic.responses.GetPodcastResponseTest" todir="${junit.output.dir}"/>
            <test name="net.subclient.subsonic.responses.GetPodcastsResponseTest" todir="${junit.output.dir}"/>
            <test name="net.subclient.subsonic.responses.GetRandomSongsResponseTest" todir="${junit.output.dir}"/>
            <test name="net.subclient.subsonic.responses.GetStarredResponseTest" todir="${junit.output.dir}"/>
            <test name="net.subclient.subsonic.responses.SearchResponseTest" todir="${junit.output.dir}"/>
            <test name="net.subclient.subsonic.responses.SubsonicResponseTest" todir="${junit.output.dir}"/>
            <classpath refid="Subconnector.classpath"/>
        </junit>
    </target>
    <target name="net.subclient.subsonic.util-test">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="net.subclient.subsonic.util.AlbumRatingTest" todir="${junit.output.dir}"/>
            <test name="net.subclient.subsonic.util.VersionTest" todir="${junit.output.dir}"/>
            <classpath refid="Subconnector.classpath"/>
        </junit>
    </target>
    <target name="junitreport">
        <junitreport todir="${junit.output.dir}">
            <fileset dir="${junit.output.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.output.dir}"/>
        </junitreport>
    </target>

</project>